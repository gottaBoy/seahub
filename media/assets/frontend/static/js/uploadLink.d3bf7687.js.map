{"version":3,"file":"static/js/uploadLink.d3bf7687.js","mappings":"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","sources":["pages/upload-link/upload-list-item.js","pages/upload-link/forbid-upload-list-item.js","pages/upload-link/upload-progress-dialog.js","pages/upload-link/file-uploader.js","pages/upload-link/index.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { gettext } from '../../utils/constants';\nimport { Utils } from '../../utils/utils';\n\nconst propTypes = {\n  resumableFile: PropTypes.object.isRequired,\n  onUploadCancel: PropTypes.func.isRequired,\n  onUploadRetry: PropTypes.func.isRequired,\n};\n\nconst UPLOAD_UPLOADING = 'uploading';\nconst UPLOAD_ERROR = 'error';\nconst UPLOAD_ISSAVING = 'isSaving';\nconst UPLOAD_UPLOADED = 'uploaded';\n\nclass UploadListItem extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      uploadState: UPLOAD_UPLOADING\n    };\n  }\n\n  componentWillReceiveProps(nextProps) {\n    let { resumableFile } = nextProps;\n    let uploadState = UPLOAD_UPLOADING;\n\n    if (resumableFile.error) {\n      uploadState = UPLOAD_ERROR;\n    } else {\n      if (resumableFile.remainingTime === 0 && !resumableFile.isSaved) {\n        uploadState = UPLOAD_ISSAVING;\n      }\n\n      if (resumableFile.isSaved) {\n        uploadState = UPLOAD_UPLOADED;\n      }\n    }\n\n    this.setState({uploadState: uploadState});\n  }\n\n  onUploadCancel = (e) => {\n    e.preventDefault();\n    this.props.onUploadCancel(this.props.resumableFile);\n  };\n\n  onUploadRetry = (e) => {\n    e.preventDefault();\n    this.props.onUploadRetry(this.props.resumableFile);\n  };\n\n  formatFileSize = (size) => {\n    if (typeof size !== 'number') {\n      return '';\n    }\n    if (size >= 1000 * 1000 * 1000) {\n      return (size / (1000 * 1000 * 1000)).toFixed(1) + ' G';\n    }\n    if (size >= 1000 * 1000) {\n      return (size / (1000 * 1000)).toFixed(1) + ' M';\n    }\n    if (size >= 1000) {\n      return (size / 1000).toFixed(1) + ' K';\n    }\n    return size.toFixed(1) + ' B';\n  };\n\n  render() {\n    let { resumableFile } = this.props;\n    let progress = Math.round(resumableFile.progress() * 100);\n    let error = resumableFile.error;\n\n    return (\n      <tr className=\"file-upload-item\">\n        <td className=\"upload-name\">\n          <div className=\"ellipsis\">{resumableFile.newFileName}</div>\n        </td>\n        <td>\n          <span className=\"file-size\">{this.formatFileSize(resumableFile.size)}</span>\n        </td>\n        <td className=\"upload-progress\">\n          {(this.state.uploadState === UPLOAD_UPLOADING || this.state.uploadState === UPLOAD_ISSAVING) &&\n            <Fragment>\n              {resumableFile.size >= (100 * 1000 * 1000) &&\n                <Fragment>\n                  {resumableFile.isUploading() && (\n                    <div className=\"progress-container\">\n                      <div className=\"progress\">\n                        <div className=\"progress-bar\" role=\"progressbar\" style={{width: `${progress}%`}} aria-valuenow={progress} aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                      </div>\n                      {(resumableFile.remainingTime === -1) && <div className=\"progress-text\">{gettext('Preparing to upload...')}</div>}\n                      {(resumableFile.remainingTime > 0) && <div className=\"progress-text\">{gettext('Remaining')}{' '}{Utils.formatTime(resumableFile.remainingTime)}</div>}\n                      {(resumableFile.remainingTime === 0) && <div className=\"progress-text\">{gettext('Indexing...')}</div>}\n                    </div>\n                  )}\n                  {!resumableFile.isUploading() && (\n                    <div className=\"progress-container d-flex align-items-center\">\n                      <div className=\"progress\">\n                        <div className=\"progress-bar\" role=\"progressbar\" style={{width: `${progress}%`}} aria-valuenow={progress} aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                      </div>\n                    </div>\n                  )}\n                </Fragment>\n              }\n              {(resumableFile.size < (100 * 1000 * 1000)) &&\n                <div className=\"progress-container d-flex align-items-center\">\n                  <div className=\"progress\">\n                    <div className=\"progress-bar\" role=\"progressbar\" style={{width: `${progress}%`}} aria-valuenow={progress} aria-valuemin=\"0\" aria-valuemax=\"100\"></div>\n                  </div>\n                </div>\n              }\n            </Fragment>\n          }\n          {this.state.uploadState === UPLOAD_ERROR && (\n            <div className=\"message err-message ml-0\" dangerouslySetInnerHTML={{__html: error}}></div>\n          )}\n        </td>\n        <td className=\"upload-operation\">\n          <Fragment>\n            {this.state.uploadState === UPLOAD_UPLOADING && (\n              <a href=\"#\" onClick={this.onUploadCancel} role=\"button\">{gettext('Cancel')}</a>\n            )}\n            {this.state.uploadState === UPLOAD_ERROR && (\n              <a href=\"#\" onClick={this.onUploadRetry} role=\"button\">{gettext('Retry')}</a>\n            )}\n            {this.state.uploadState === UPLOAD_ISSAVING && (\n              <span className=\"saving\">{gettext('Saving...')}</span>\n            )}\n            {this.state.uploadState === UPLOAD_UPLOADED && (\n              <span className=\"uploaded\">{gettext('Uploaded')}</span>\n            )}\n          </Fragment>\n        </td>\n      </tr>\n    );\n  }\n}\n\nUploadListItem.propTypes = propTypes;\n\nexport default UploadListItem;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Utils } from '../../utils/utils';\nimport { gettext, maxUploadFileSize } from '../../utils/constants';\n\nconst propTypes = {\n  file: PropTypes.object,\n};\n\nclass ForbidUploadListItem extends React.Component {\n\n  render() {\n    let { file } = this.props;\n    let msg = gettext('Please upload files less than {placeholder}').replace('{placeholder}', Utils.bytesToSize(maxUploadFileSize * 1000 * 1000));\n    return (\n      <tr className=\"file-upload-item\">\n        <td className=\"upload-name\">\n          <div className=\"ellipsis\">{file.name}</div>\n        </td>\n\n        <td colSpan={3} className=\"error\">{msg}</td>\n      </tr>\n    );\n  }\n}\n\nForbidUploadListItem.propTypes = propTypes;\n\nexport default ForbidUploadListItem;\n","import React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport { Button, ButtonDropdown, DropdownToggle, DropdownMenu, DropdownItem } from 'reactstrap';\nimport { gettext } from '../../utils/constants';\nimport UploadListItem from './upload-list-item';\nimport ForbidUploadListItem from './forbid-upload-list-item';\n\nconst propTypes = {\n  uploadFileList: PropTypes.array.isRequired,\n  forbidUploadFileList: PropTypes.array.isRequired,\n  onCancelAllUploading: PropTypes.func.isRequired,\n  onUploadCancel: PropTypes.func.isRequired,\n  onUploadRetry: PropTypes.func.isRequired,\n  onFileUpload: PropTypes.func.isRequired,\n  onFolderUpload: PropTypes.func.isRequired,\n  allFilesUploaded: PropTypes.bool.isRequired\n};\n\nclass UploadProgressDialog extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      dropdownOpen: false\n    };\n  }\n\n  toggleDropdown = () => {\n    this.setState({\n      dropdownOpen: !this.state.dropdownOpen\n    });\n  };\n\n  onDropdownToggleKeyDown = (e) => {\n    if (e.key == 'Enter' || e.key == 'Space') {\n      this.toggleDropdown();\n    }\n  };\n\n  onMenuItemKeyDown = (e) => {\n    if (e.key == 'Enter' || e.key == 'Space') {\n      e.target.click();\n    }\n  };\n\n  render() {\n    let { allFilesUploaded } = this.props;\n    return (\n      <Fragment>\n        <div className=\"text-center\">\n          <ButtonDropdown isOpen={this.state.dropdownOpen} toggle={this.toggleDropdown}>\n            <DropdownToggle color=\"primary\" caret onKeyDown={this.onDropdownToggleKeyDown}>{gettext('Upload')}</DropdownToggle>\n            <DropdownMenu>\n              <DropdownItem onClick={this.props.onFileUpload} onKeyDown={this.onMenuItemKeyDown}>{gettext('Upload Files')}</DropdownItem>\n              <DropdownItem onClick={this.props.onFolderUpload} onKeyDown={this.onMenuItemKeyDown}>{gettext('Upload Folder')}</DropdownItem>\n            </DropdownMenu>\n          </ButtonDropdown>\n          <Button color=\"primary\" outline={true} className=\"ml-4\"\n            onClick={this.props.onCancelAllUploading}\n            disabled={allFilesUploaded}>\n            {gettext('Cancel All')}\n          </Button>\n        </div>\n        <div className=\"mt-4 mh-2\">\n          <table className=\"table-thead-hidden\">\n            <thead>\n              <tr>\n                <th width=\"35%\">{gettext('name')}</th>\n                <th width=\"15%\">{gettext('size')}</th>\n                <th width=\"35%\">{gettext('progress')}</th>\n                <th width=\"15%\">{gettext('state')}</th>\n              </tr>\n            </thead>\n            <tbody>\n              {this.props.forbidUploadFileList.map((file, index) => {\n                return (<ForbidUploadListItem key={index} file={file} />);\n              })}\n              {this.props.uploadFileList.map((resumableFile, index) => {\n                return (\n                  <UploadListItem\n                    key={index}\n                    resumableFile={resumableFile}\n                    onUploadCancel={this.props.onUploadCancel}\n                    onUploadRetry={this.props.onUploadRetry}\n                  />\n                );\n              }).reverse()\n              }\n            </tbody>\n          </table>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nUploadProgressDialog.propTypes = propTypes;\n\nexport default UploadProgressDialog;\n","// This file is copied from frontend/src/components/file-uploader/file-uploader.js,\n// and modified according to the requirements of this page.\nimport React, { Fragment } from 'react';\nimport PropTypes from 'prop-types';\nimport Resumablejs from '@seafile/resumablejs';\nimport MD5 from 'MD5';\nimport { resumableUploadFileBlockSize, maxUploadFileSize, maxNumberOfFilesForFileupload } from '../../utils/constants';\nimport { seafileAPI } from '../../utils/seafile-api';\nimport { Utils } from '../../utils/utils';\nimport { gettext } from '../../utils/constants';\nimport UploadProgressDialog from './upload-progress-dialog';\nimport toaster from '../../components/toast';\n\nimport '../../css/file-uploader.css';\n\nconst propTypes = {\n  dragAndDrop: PropTypes.bool.isRequired,\n  token: PropTypes.string.isRequired,\n  repoID: PropTypes.string.isRequired,\n  path: PropTypes.string.isRequired,\n\n  filetypes: PropTypes.array,\n  chunkSize: PropTypes.number,\n  withCredentials: PropTypes.bool,\n  testMethod: PropTypes.string,\n  testChunks: PropTypes.number,\n  simultaneousUploads: PropTypes.number,\n  fileParameterName: PropTypes.string,\n  minFileSizeErrorCallback: PropTypes.func,\n  fileTypeErrorCallback: PropTypes.func,\n  onFileUploadSuccess: PropTypes.func.isRequired,\n};\n\nclass FileUploader extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      retryFileList: [],\n      uploadFileList: [],\n      forbidUploadFileList: [],\n      totalProgress: 0,\n      isUploadProgressDialogShow: false,\n      currentResumableFile: null,\n      uploadBitrate: 0,\n      allFilesUploaded: false,\n    };\n\n    this.uploadInput = React.createRef();\n\n    this.notifiedFolders = [];\n\n    this.timestamp = null;\n    this.loaded = 0;\n    this.bitrateInterval = 500; // Interval in milliseconds to calculate the bitrate\n    this.isUploadLinkLoaded = false;\n\n    window.onbeforeunload = this.onbeforeunload;\n  }\n\n  componentDidMount() {\n    this.resumable = new Resumablejs({\n      target: '',\n      query: this.setQuery || {},\n      fileType: this.props.filetypes,\n      maxFiles: maxNumberOfFilesForFileupload || undefined,\n      maxFileSize: maxUploadFileSize * 1000 * 1000 || undefined,\n      testMethod: this.props.testMethod || 'post',\n      testChunks: this.props.testChunks || false,\n      headers: this.setHeaders || {},\n      withCredentials: this.props.withCredentials || false,\n      chunkSize: parseInt(resumableUploadFileBlockSize) * 1024 * 1024 || 1 * 1024 * 1024,\n      simultaneousUploads: this.props.simultaneousUploads || 1,\n      fileParameterName: this.props.fileParameterName,\n      generateUniqueIdentifier: this.generateUniqueIdentifier,\n      forceChunkSize: true,\n      maxChunkRetries: 3,\n      minFileSize: 0,\n    });\n\n    this.resumable.assignBrowse(this.uploadInput.current, true);\n    if (this.props.dragAndDrop) {\n      this.resumable.assignDrop(document.getElementById('upload-link-drop-zone'));\n    }\n\n    this.bindCallbackHandler();\n    this.bindEventHandler();\n  }\n\n  componentWillUnmount = () => {\n    window.onbeforeunload = null;\n    if (this.props.dragAndDrop === true) {\n      this.resumable.disableDropOnDocument();\n    }\n  };\n\n  onbeforeunload = () => {\n    if (window.uploader &&\n        window.uploader.isUploadProgressDialogShow &&\n        window.uploader.totalProgress !== 100) {\n      return '';\n    }\n  };\n\n  bindCallbackHandler = () => {\n    let { minFileSizeErrorCallback, fileTypeErrorCallback } = this.props;\n\n    if (this.maxFilesErrorCallback) {\n      this.resumable.opts.maxFilesErrorCallback = this.maxFilesErrorCallback;\n    }\n\n    if (minFileSizeErrorCallback) {\n      this.resumable.opts.minFileSizeErrorCallback = this.props.minFileSizeErrorCallback;\n    }\n\n    if (this.maxFileSizeErrorCallback) {\n      this.resumable.opts.maxFileSizeErrorCallback = this.maxFileSizeErrorCallback;\n    }\n\n    if (fileTypeErrorCallback) {\n      this.resumable.opts.fileTypeErrorCallback = this.props.fileTypeErrorCallback;\n    }\n\n  };\n\n  bindEventHandler = () => {\n    this.resumable.on('chunkingComplete', this.onChunkingComplete.bind(this));\n    this.resumable.on('fileAdded', this.onFileAdded.bind(this));\n    this.resumable.on('fileProgress', this.onFileProgress.bind(this));\n    this.resumable.on('fileSuccess', this.onFileUploadSuccess.bind(this));\n    this.resumable.on('fileError', this.onFileError.bind(this));\n    this.resumable.on('uploadStart', this.onUploadStart.bind(this));\n    this.resumable.on('progress', this.onProgress.bind(this));\n    this.resumable.on('complete', this.onComplete.bind(this));\n    this.resumable.on('error', this.onError.bind(this));\n    this.resumable.on('dragstart', this.onDragStart.bind(this));\n  };\n\n  maxFilesErrorCallback = (files, errorCount) => {\n    let maxFiles = maxNumberOfFilesForFileupload;\n    let message = gettext('Please upload no more than {maxFiles} files at a time.');\n    message = message.replace('{maxFiles}', maxFiles);\n    toaster.danger(message);\n  };\n\n  maxFileSizeErrorCallback = (file) => {\n    let { forbidUploadFileList } = this.state;\n    forbidUploadFileList.push(file);\n    this.setState({forbidUploadFileList: forbidUploadFileList});\n  };\n\n  onChunkingComplete = (resumableFile) => {\n\n    let allFilesUploaded = this.state.allFilesUploaded;\n    if (allFilesUploaded === true) {\n      this.setState({allFilesUploaded: false});\n    }\n\n    let path = this.props.path;\n    let fileName = resumableFile.fileName;\n    let relativePath = resumableFile.relativePath;\n    let isFile = fileName === relativePath;\n\n    resumableFile.formData = {};\n    if (isFile) { // upload file\n      resumableFile.formData  = {\n        parent_dir: path,\n      };\n    } else { // upload folder\n      let relative_path = relativePath.slice(0, relativePath.lastIndexOf('/') + 1);\n      resumableFile.formData  = {\n        parent_dir: path,\n        relative_path: relative_path\n      };\n    }\n  };\n\n  onFileAdded = (resumableFile, files) => {\n    let isFile = resumableFile.fileName === resumableFile.relativePath;\n    if (isFile && files.length === 1) {\n      let hasRepetition = false;\n      /*\n      let direntList = this.props.direntList;\n      for (let i = 0; i < direntList.length; i++) {\n        if (direntList[i].type === 'file' && direntList[i].name === resumableFile.fileName) {\n          hasRepetition = true;\n          break;\n        }\n      }\n      */\n      if (hasRepetition) {\n        this.setState({\n          isUploadRemindDialogShow: true,\n          currentResumableFile: resumableFile,\n        });\n      } else {\n        this.setUploadFileList(this.resumable.files);\n        seafileAPI.sharedUploadLinkGetFileUploadUrl(this.props.token).then(res => {\n          this.resumable.opts.target = res.data.upload_link + '?ret-json=1';\n          this.resumableUpload(resumableFile);\n        }).catch(error => {\n          let errMessage = Utils.getErrorMsg(error);\n          toaster.danger(errMessage);\n        });\n      }\n    } else {\n      this.setUploadFileList(this.resumable.files);\n      if (!this.isUploadLinkLoaded) {\n        this.isUploadLinkLoaded = true;\n        seafileAPI.sharedUploadLinkGetFileUploadUrl(this.props.token).then(res => {\n          this.resumable.opts.target = res.data.upload_link + '?ret-json=1';\n          this.resumable.upload();\n        }).catch(error => {\n          let errMessage = Utils.getErrorMsg(error);\n          toaster.danger(errMessage);\n        });\n      }\n    }\n  };\n\n  resumableUpload = (resumableFile) => {\n    let { repoID, path } = this.props;\n    seafileAPI.getFileUploadedBytes(repoID, path, resumableFile.fileName).then(res => {\n      let uploadedBytes = res.data.uploadedBytes;\n      let blockSize = parseInt(resumableUploadFileBlockSize) * 1024 * 1024 || 1024 * 1024;\n      let offset = Math.floor(uploadedBytes / blockSize);\n      resumableFile.markChunksCompleted(offset);\n      this.resumable.upload();\n    }).catch(error => {\n      let errMessage = Utils.getErrorMsg(error);\n      toaster.danger(errMessage);\n    });\n  };\n\n  filesAddedComplete = (resumable, files) => {\n    let { forbidUploadFileList } = this.state;\n    if (forbidUploadFileList.length > 0 && files.length === 0) {\n      this.setState({\n        isUploadProgressDialogShow: true,\n        totalProgress: 100\n      });\n    }\n  };\n\n  setUploadFileList = () => {\n    let uploadFileList = this.resumable.files;\n    this.setState({\n      uploadFileList: uploadFileList,\n      isUploadProgressDialogShow: true,\n    });\n    Utils.registerGlobalVariable('uploader', 'isUploadProgressDialogShow', true);\n  };\n\n  onFileProgress = (resumableFile) => {\n    let uploadBitrate = this.getBitrate();\n    let uploadFileList = this.state.uploadFileList.map(item => {\n      if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n        if (uploadBitrate) {\n          let lastSize = (item.size - (item.size * item.progress())) * 8;\n          let time = Math.floor(lastSize / uploadBitrate);\n          item.remainingTime = time;\n        }\n      }\n      return item;\n    });\n\n    this.setState({\n      uploadBitrate: uploadBitrate,\n      uploadFileList: uploadFileList\n    });\n  };\n\n  getBitrate = () => {\n    let loaded = 0;\n    let uploadBitrate = 0;\n    let now = new Date().getTime();\n\n    this.resumable.files.forEach(file => {\n      loaded += file.progress() * file.size;\n    });\n\n    if (this.timestamp) {\n      let timeDiff = (now - this.timestamp);\n      if (timeDiff < this.bitrateInterval) {\n        return this.state.uploadBitrate;\n      }\n\n      // 1. Cancel will produce loaded greater than this.loaded\n      // 2. reset can make this.loaded to be 0\n      if (loaded < this.loaded || this.loaded === 0) {\n        this.loaded = loaded; //\n      }\n\n      uploadBitrate = (loaded - this.loaded) * (1000 / timeDiff) * 8;\n    }\n\n    this.timestamp = now;\n    this.loaded = loaded;\n\n    return uploadBitrate;\n  };\n\n  // start uploading\n  onUploadStart = () => {\n    const message = gettext('File upload started');\n    toaster.notify(message);\n  };\n\n  onProgress = () => {\n    let progress = Math.round(this.resumable.progress() * 100);\n    this.setState({totalProgress: progress});\n    Utils.registerGlobalVariable('uploader', 'totalProgress', progress);\n  };\n\n  onFileUploadSuccess = (resumableFile, message) => {\n    let formData = resumableFile.formData;\n    let currentTime = new Date().getTime()/1000;\n    message = formData.replace ? message : JSON.parse(message)[0];\n    if (formData.relative_path) { // upload folder\n      let relative_path = formData.relative_path;\n      let dir_name = relative_path.slice(0, relative_path.indexOf('/'));\n      let dirent = {\n        id: message.id,\n        name: dir_name,\n        type: 'dir',\n        mtime: currentTime,\n      };\n\n      // update folders cache\n      let isExist = this.notifiedFolders.some(item => {return item.name === dirent.name;});\n      if (!isExist) {\n        this.notifiedFolders.push(dirent);\n        this.props.onFileUploadSuccess(dirent);\n      }\n\n      // update uploadFileList\n      let uploadFileList = this.state.uploadFileList.map(item => {\n        if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n          item.newFileName = relative_path + message.name;\n          item.isSaved = true;\n        }\n        return item;\n      });\n      this.setState({uploadFileList: uploadFileList});\n\n      return;\n    }\n\n    if (formData.replace) { // upload file -- replace exist file\n      let fileName = resumableFile.fileName;\n      let dirent = {\n        id: message,\n        name: fileName,\n        type: 'file',\n        mtime: currentTime\n      };\n      this.props.onFileUploadSuccess(dirent); // this contance: just one file\n\n      let uploadFileList = this.state.uploadFileList.map(item => {\n        if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n          item.newFileName = fileName;\n          item.isSaved = true;\n        }\n        return item;\n      });\n      this.setState({uploadFileList: uploadFileList});\n\n      return;\n    }\n\n    // upload file -- add files\n    let dirent = {\n      id: message.id,\n      type: 'file',\n      name: message.name,\n      size: message.size,\n      mtime: currentTime,\n    };\n    this.props.onFileUploadSuccess(dirent);\n\n    let uploadFileList = this.state.uploadFileList.map(item => {\n      if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n        item.newFileName = message.name;\n        item.isSaved = true;\n      }\n      return item;\n    });\n    this.setState({uploadFileList: uploadFileList});\n  };\n\n  onFileError = (resumableFile, message) => {\n    let error = '';\n    if (!message) {\n      error = gettext('Network error');\n    } else {\n      // eg: '{\"error\": \"Internal error\" \\n }'\n      let errorMessage = message.replace(/\\n/g, '');\n      errorMessage  = JSON.parse(errorMessage);\n      error = errorMessage.error;\n      if (error === 'File locked by others.') {\n        error = gettext('File is locked by others.');\n      }\n      if (error === 'Internal error.') {\n        error = gettext('Internal Server Error');\n      }\n    }\n\n    let uploadFileList = this.state.uploadFileList.map(item => {\n      if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n        this.state.retryFileList.push(item);\n        item.error = error;\n      }\n      return item;\n    });\n\n    this.loaded = 0;  // reset loaded data;\n    this.setState({\n      retryFileList: this.state.retryFileList,\n      uploadFileList: uploadFileList\n    });\n  };\n\n  onComplete = () => {\n    if (!this.error) {\n      const message = gettext('All files uploaded');\n      toaster.success(message);\n    }\n    this.error = false; // reset it\n\n    this.notifiedFolders = [];\n    // reset upload link loaded\n    this.isUploadLinkLoaded = false;\n    this.setState({allFilesUploaded: true});\n  };\n\n  onError = (message, file) => {\n    let msg = gettext('Error');\n    if (file && file.fileName) {\n      msg = gettext('Failed to upload {file_name}.')\n        .replace('{file_name}', file.fileName);\n    }\n    toaster.danger(msg, {'id': 'file-error-msg'});\n    this.error = true;\n\n    // reset upload link loaded\n    this.isUploadLinkLoaded = false;\n    // After the error, the user can switch windows\n    Utils.registerGlobalVariable('uploader', 'totalProgress', 100);\n  };\n\n  setHeaders = (resumableFile, resumable) => {\n    let offset = resumable.offset;\n    let chunkSize = resumable.getOpt('chunkSize');\n    let fileSize = resumableFile.size === 0 ? 1 : resumableFile.size;\n    let startByte = offset !== 0 ? offset * chunkSize : 0;\n    let endByte = Math.min(fileSize, (offset + 1) * chunkSize) - 1;\n\n    if (fileSize - resumable.endByte < chunkSize && !resumable.getOpt('forceChunkSize')) {\n      endByte = fileSize;\n    }\n\n    let headers = {\n      'Accept': 'application/json; text/javascript, */*; q=0.01',\n      'Content-Disposition': 'attachment; filename=\"' + encodeURI(resumableFile.fileName) + '\"',\n      'Content-Range': 'bytes ' + startByte + '-' + endByte + '/' + fileSize,\n    };\n\n    return headers;\n  };\n\n  setQuery = (resumableFile) => {\n    let formData = resumableFile.formData;\n    return formData;\n  };\n\n  generateUniqueIdentifier = (file) => {\n    let relativePath = file.webkitRelativePath||file.relativePath||file.fileName||file.name;\n    return MD5(relativePath + new Date()) + relativePath;\n  };\n\n  onClick = (e) => {\n    e.nativeEvent.stopImmediatePropagation();\n    e.stopPropagation();\n  };\n\n  onFileUpload = () => {\n    this.uploadInput.current.removeAttribute('webkitdirectory');\n    this.uploadInput.current.click();\n  };\n\n  onFolderUpload = () => {\n    this.uploadInput.current.setAttribute('webkitdirectory', 'webkitdirectory');\n    this.uploadInput.current.click();\n  };\n\n  onDragStart = () => {\n    this.uploadInput.current.setAttribute('webkitdirectory', 'webkitdirectory');\n  };\n\n  onCloseUploadDialog = () => {\n    this.loaded = 0;\n    this.resumable.files = [];\n    // reset upload link loaded\n    this.isUploadLinkLoaded = false;\n    this.setState({isUploadProgressDialogShow: false, uploadFileList: [], forbidUploadFileList: []});\n    Utils.registerGlobalVariable('uploader', 'isUploadProgressDialogShow', false);\n  };\n\n  onUploadCancel = (uploadingItem) => {\n\n    let uploadFileList = this.state.uploadFileList.filter(item => {\n      if (item.uniqueIdentifier === uploadingItem.uniqueIdentifier) {\n        item.cancel(); // execute cancel function will delete the file at the same time\n        return false;\n      }\n      return true;\n    });\n\n    if (!this.resumable.isUploading()) {\n      this.setState({\n        totalProgress: '100',\n        allFilesUploaded: true,\n      });\n      this.loaded = 0;\n    }\n\n    this.setState({uploadFileList: uploadFileList});\n  };\n\n  onCancelAllUploading = () => {\n    let uploadFileList = this.state.uploadFileList.filter(item => {\n      if (Math.round(item.progress() !== 1)) {\n        item.cancel();\n        return false;\n      }\n      return true;\n    });\n\n    this.loaded = 0;\n\n    this.setState({\n      allFilesUploaded: true,\n      totalProgress: '100',\n      uploadFileList: uploadFileList\n    });\n    // reset upload link loaded\n    this.isUploadLinkLoaded = false;\n  };\n\n  onUploadRetry = (resumableFile) => {\n    seafileAPI.sharedUploadLinkGetFileUploadUrl(this.props.token).then(res => {\n      this.resumable.opts.target = res.data.upload_link + '?ret-json=1';\n      let retryFileList = this.state.retryFileList.filter(item => {\n        return item.uniqueIdentifier !== resumableFile.uniqueIdentifier;\n      });\n      let uploadFileList = this.state.uploadFileList.map(item => {\n        if (item.uniqueIdentifier === resumableFile.uniqueIdentifier) {\n          item.error = null;\n          this.retryUploadFile(item);\n        }\n        return item;\n      });\n\n      this.setState({\n        retryFileList: retryFileList,\n        uploadFileList: uploadFileList\n      });\n    }).catch(error => {\n      let errMessage = Utils.getErrorMsg(error);\n      toaster.danger(errMessage);\n    });\n  };\n\n  retryUploadFile = (resumableFile) => {\n    let { repoID, path } = this.props;\n    let fileName = resumableFile.fileName;\n    let isFile = resumableFile.fileName === resumableFile.relativePath;\n    if (!isFile) {\n      let relative_path = resumableFile.formData.relative_path;\n      let prefix = path === '/' ? (path + relative_path) : (path + '/' + relative_path);\n      fileName = prefix + fileName;\n    }\n\n    resumableFile.bootstrap();\n    var firedRetry = false;\n    resumableFile.resumableObj.on('chunkingComplete', () => {\n      if(!firedRetry) {\n        seafileAPI.getFileUploadedBytes(repoID, path, fileName).then(res => {\n          let uploadedBytes = res.data.uploadedBytes;\n          let blockSize = parseInt(resumableUploadFileBlockSize) * 1024 * 1024 || 1024 * 1024;\n          let offset = Math.floor(uploadedBytes / blockSize);\n          resumableFile.markChunksCompleted(offset);\n\n          resumableFile.resumableObj.upload();\n\n        }).catch(error => {\n          let errMessage = Utils.getErrorMsg(error);\n          toaster.danger(errMessage);\n        });\n      }\n      firedRetry = true;\n    });\n\n  };\n\n  replaceRepetitionFile = () => {\n    let { repoID, path } = this.props;\n    seafileAPI.getUpdateLink(repoID, path).then(res => {\n      this.resumable.opts.target = res.data;\n\n      let resumableFile = this.resumable.files[this.resumable.files.length - 1];\n      resumableFile.formData['replace'] = 1;\n      resumableFile.formData['target_file'] = resumableFile.formData.parent_dir + resumableFile.fileName;\n      this.setUploadFileList(this.resumable.files);\n      this.resumable.upload();\n    }).catch(error => {\n      let errMessage = Utils.getErrorMsg(error);\n      toaster.danger(errMessage);\n    });\n  };\n\n  cancelFileUpload = () => {\n    this.resumable.files.pop(); //delete latest file；\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <div className=\"file-uploader-container\">\n          <div className=\"file-uploader\">\n            <input className=\"upload-input\" type=\"file\" ref={this.uploadInput} onClick={this.onClick} />\n          </div>\n        </div>\n        <UploadProgressDialog\n          retryFileList={this.state.retryFileList}\n          uploadFileList={this.state.uploadFileList}\n          forbidUploadFileList={this.state.forbidUploadFileList}\n          totalProgress={this.state.totalProgress}\n          uploadBitrate={this.state.uploadBitrate}\n          allFilesUploaded={this.state.allFilesUploaded}\n          onCloseUploadDialog={this.onCloseUploadDialog}\n          onCancelAllUploading={this.onCancelAllUploading}\n          onUploadCancel={this.onUploadCancel}\n          onUploadRetry={this.onUploadRetry}\n          onFileUpload={this.onFileUpload}\n          onFolderUpload={this.onFolderUpload}\n        />\n      </Fragment>\n    );\n  }\n}\n\nFileUploader.propTypes = propTypes;\n\nexport default FileUploader;\n","import React, { Fragment } from 'react';\nimport ReactDom from 'react-dom';\nimport { Utils } from '../../utils/utils';\nimport { seafileAPI } from '../../utils/seafile-api';\nimport { gettext } from '../../utils/constants';\nimport Logo from '../../components/logo';\nimport Account from '../../components/common/account';\nimport FileUploader from './file-uploader';\n\nimport '../../css/upload-link.css';\n\nconst loggedUser = window.app.pageOptions.username;\nconst {\n  dirName,\n  sharedBy,\n  noQuota,\n  maxUploadFileSize,\n  token,\n  repoID,\n  path\n} = window.uploadLink;\n\n\nclass SharedUploadLink extends React.Component {\n\n  onFileUploadSuccess = (direntObject) => {\n    const { name } = direntObject;\n    seafileAPI.shareLinksUploadDone(token, Utils.joinPath(path, name));\n  };\n\n  render() {\n    return (\n      <div className=\"h-100 d-flex flex-column\">\n        <div className=\"top-header d-flex justify-content-between\">\n          <Logo />\n          {loggedUser && <Account />}\n        </div>\n        <div className=\"o-auto\">\n          <div className=\"py-4 px-6 mx-auto rounded\" id=\"upload-link-panel\">\n            <h3 className=\"h5\" dangerouslySetInnerHTML={{__html: gettext('Upload files to {folder_name_placeholder}')\n              .replace('{folder_name_placeholder}', `<span class=\"op-target\">${Utils.HTMLescape(dirName)}</span>`)}}></h3>\n            <p className=\"small shared-by\" dangerouslySetInnerHTML={{__html: `${gettext('shared by:')} ${sharedBy.avatar} ${sharedBy.name}`}}></p>\n            {noQuota ? (\n              <div className=\"py-6 text-center\">\n                <span className=\"sf3-font sf3-font-tips warning-icon\"></span>\n                <p>{gettext('The owner of this library has run out of space.')}</p>\n              </div>\n            ) : (\n              <Fragment>\n                <ol className=\"small text-gray\">\n                  <li className=\"tip-list-item\">{gettext('Folder upload is limited to Chrome, Firefox 50+, and Microsoft Edge.')}</li>\n                  {maxUploadFileSize && <li className=\"tip-list-item\">{gettext('File size should be smaller than {max_size_placeholder}.').replace('{max_size_placeholder}', Utils.bytesToSize(maxUploadFileSize * 1000 * 1000))}</li>}\n                </ol>\n                <div id=\"upload-link-drop-zone\" className=\"text-center mt-2 mb-4\">\n                  <span className=\"sf3-font sf3-font-upload upload-icon\"></span>\n                  <p className=\"small text-gray mb-0\">{gettext('Drag and drop files or folders here.')}</p>\n                </div>\n                <FileUploader\n                  ref={uploader => this.uploader = uploader}\n                  dragAndDrop={true}\n                  token={token}\n                  repoID={repoID}\n                  path={path}\n                  onFileUploadSuccess={this.onFileUploadSuccess}\n                />\n              </Fragment>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDom.render(<SharedUploadLink />, document.getElementById('wrapper'));\n"],"names":["UPLOAD_UPLOADING","UPLOAD_ERROR","UPLOAD_ISSAVING","UPLOAD_UPLOADED","_React$Component","_inherits","UploadListItem","_super","_createSuper","props","_this","_classCallCheck","call","onUploadCancel","e","preventDefault","resumableFile","onUploadRetry","formatFileSize","size","toFixed","state","uploadState","_createClass","key","value","nextProps","error","remainingTime","isSaved","this","setState","progress","Math","round","_jsxs","className","children","_jsx","newFileName","Fragment","isUploading","role","style","width","concat","gettext","Utils","formatTime","dangerouslySetInnerHTML","__html","href","onClick","React","ForbidUploadListItem","apply","arguments","file","msg","replace","bytesToSize","maxUploadFileSize","name","colSpan","UploadProgressDialog","toggleDropdown","dropdownOpen","onDropdownToggleKeyDown","onMenuItemKeyDown","target","click","_this2","allFilesUploaded","ButtonDropdown","isOpen","toggle","DropdownToggle","color","caret","onKeyDown","DropdownMenu","DropdownItem","onFileUpload","onFolderUpload","Button","outline","onCancelAllUploading","disabled","forbidUploadFileList","map","index","uploadFileList","reverse","FileUploader","componentWillUnmount","window","onbeforeunload","dragAndDrop","resumable","disableDropOnDocument","uploader","isUploadProgressDialogShow","totalProgress","bindCallbackHandler","_this$props","minFileSizeErrorCallback","fileTypeErrorCallback","maxFilesErrorCallback","opts","maxFileSizeErrorCallback","bindEventHandler","on","onChunkingComplete","bind","_assertThisInitialized","onFileAdded","onFileProgress","onFileUploadSuccess","onFileError","onUploadStart","onProgress","onComplete","onError","onDragStart","files","errorCount","maxFiles","maxNumberOfFilesForFileupload","message","toaster","danger","push","path","fileName","relativePath","isFile","formData","parent_dir","relative_path","slice","lastIndexOf","length","setUploadFileList","seafileAPI","sharedUploadLinkGetFileUploadUrl","token","then","res","data","upload_link","resumableUpload","catch","errMessage","getErrorMsg","isUploadLinkLoaded","upload","_this$props2","repoID","getFileUploadedBytes","uploadedBytes","blockSize","parseInt","resumableUploadFileBlockSize","offset","floor","markChunksCompleted","filesAddedComplete","registerGlobalVariable","uploadBitrate","getBitrate","item","uniqueIdentifier","lastSize","time","loaded","now","Date","getTime","forEach","timestamp","timeDiff","bitrateInterval","notify","currentTime","JSON","parse","dir_name","indexOf","dirent","id","type","mtime","notifiedFolders","some","errorMessage","retryFileList","success","setHeaders","chunkSize","getOpt","fileSize","startByte","endByte","min","encodeURI","setQuery","generateUniqueIdentifier","webkitRelativePath","MD5","nativeEvent","stopImmediatePropagation","stopPropagation","uploadInput","current","removeAttribute","setAttribute","onCloseUploadDialog","uploadingItem","filter","cancel","retryUploadFile","_this$props3","bootstrap","firedRetry","resumableObj","replaceRepetitionFile","_this$props4","getUpdateLink","cancelFileUpload","pop","currentResumableFile","Resumablejs","query","fileType","filetypes","undefined","maxFileSize","testMethod","testChunks","headers","withCredentials","simultaneousUploads","fileParameterName","forceChunkSize","maxChunkRetries","minFileSize","assignBrowse","assignDrop","document","getElementById","ref","loggedUser","app","pageOptions","username","_window$uploadLink","uploadLink","dirName","sharedBy","noQuota","SharedUploadLink","_len","args","Array","_key","direntObject","shareLinksUploadDone","joinPath","Logo","Account","HTMLescape","avatar","ReactDom"],"sourceRoot":""}